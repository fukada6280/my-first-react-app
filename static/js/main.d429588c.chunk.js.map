{"version":3,"sources":["components/newTodo.tsx","components/TodoListItem.tsx","components/TodoList.tsx","components/App.tsx","index.tsx"],"names":["NewTodo","onAdd","useState","title","setTitle","onSubmit","event","preventDefault","className","type","name","onChange","currentTarget","value","TodoListItem","todo","onChangeDone","onRemove","done","checked","id","changeTodoId","onClick","undefined","dataset","TodoList","todoList","map","App","setTodoList","newTodo","Math","random","toString","oldTodoList","todoId","filter","ReactDOM","render","document","querySelector"],"mappings":"qKAMaA,EAAsB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAClC,EAA0BC,mBAAiB,IAA3C,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OACI,uBAAMC,SAVW,SAACC,GAClBA,EAAMC,iBACQ,KAAVJ,IAGJF,EAAME,GACNC,EAAS,MAIqBI,UAAU,UAAxC,UACI,uBACAA,UAAU,uBACVC,KAAK,OACLC,KAAK,QAELC,SAAU,SAACL,GAAD,OAAWF,EAASE,EAAMM,cAAcC,QAElDA,MAAOV,IAEP,wBAAQM,KAAK,SAAb,8BCpBCK,EAA2B,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,KAAMC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAe3D,OACI,qBAAIT,UAAU,eAAd,UACI,wBACAA,UAAS,8BACLO,EAAKG,KAAO,4BAA8B,IAF9C,UAKI,uBACAT,KAAK,WACLU,QAASJ,EAAKG,KACdL,MAAOE,EAAKK,GACZT,SAzBa,SAACL,GACtB,IAAMe,EAAef,EAAMM,cAAcC,MACnCM,EAAUb,EAAMM,cAAcO,QAEpCH,EAAaK,EAAcF,MAuBlBJ,EAAKZ,SAEV,wBAAQ,UAASY,EAAKK,GAAIE,QAtBR,SAAChB,QACgBiB,IAAnCjB,EAAMM,cAAcY,QAAQJ,IAGhCH,EAASX,EAAMM,cAAcY,QAAQJ,KAkBjC,8BC7BCK,EAAuB,SAAC,GAA0C,IAAxCC,EAAuC,EAAvCA,SAAUV,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAC3D,OACI,oBAAIT,UAAU,WAAd,SACKkB,EAASC,KAAI,SAACZ,GAAD,OACV,cAAC,EAAD,CACAA,KAAMA,EACNC,aAAcA,EACdC,SAAUA,GACLF,EAAKK,UC8BXQ,EAxCE,WACb,MAAgC1B,mBAAiB,IAAjD,mBAAOwB,EAAP,KAAiBG,EAAjB,KA4BA,OACI,sBAAKrB,UAAU,MAAf,UACI,cAAC,EAAD,CAASP,MA5BD,SAACE,GACb,IAAM2B,EAAU,CACZ3B,QACAe,MAAM,EACNE,GAAIW,KAAKC,SAASC,YAEtBJ,GAAY,SAACK,GAAD,4BAAqBA,GAArB,CAAkCJ,UAuB1C,cAAC,EAAD,CACAJ,SAAUA,EACVV,aAtBiB,SAACmB,EAAoBjB,GAC1CW,GAAY,SAACK,GAAD,OACRA,EAAYP,KAAI,SAACZ,GACb,OAAIA,EAAKK,KAAOe,EACLpB,EAEJ,2BAAKA,GAAZ,IAAkBG,gBAiBtBD,SAZa,SAACkB,GAClBN,GAAY,SAACK,GAAD,OACZA,EAAYE,QAAO,SAACrB,GAAD,OAAUA,EAAKK,KAAOe,eC7BjDE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,W","file":"static/js/main.d429588c.chunk.js","sourcesContent":["import { FormEvent, VFC, useState } from \"react\";\n\ntype Props = {\n    onAdd: (title: string) => void;\n}\n\nexport const NewTodo: VFC<Props> = ({ onAdd }) => {\n    const [title, setTitle] = useState<string>(\"\");\n\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault(); // Formの送信を止めている\n        if (title === \"\") {\n            return;\n        }\n        onAdd(title);\n        setTitle(\"\");\n    };\n\n    return (\n        <form onSubmit={handleSubmit} className=\"NewTodo\">\n            <input \n            className=\".NewTodo__inputTitle\"\n            type=\"text\"\n            name=\"title\"\n            // ↓ inputが変更されたら`title`stateを変更する\n            onChange={(event) => setTitle(event.currentTarget.value)}\n            // valueを title state に\n            value={title}\n            />\n            <button type=\"submit\">追加</button>\n        </form>\n    );\n};","import { ChangeEvent, VFC, MouseEvent } from \"react\";\nimport { Todo } from \"../lib/todo\";\n\ntype Props = {\n    todo: Todo;\n    onChangeDone: (todoId: Todo[\"id\"], done: boolean) => void;\n    onRemove: (todoId: Todo[\"id\"]) => void;\n};\n\nexport const TodoListItem: VFC<Props> = ({ todo, onChangeDone, onRemove }) => {\n    const handleChangeTodo = (event: ChangeEvent<HTMLInputElement>) => {\n        const changeTodoId = event.currentTarget.value;\n        const checked = event.currentTarget.checked;\n\n        onChangeDone(changeTodoId, checked)\n    };\n\n    const handleClickRemove = (event: MouseEvent<HTMLButtonElement>) => {\n        if (event.currentTarget.dataset.id === undefined) {\n            return;\n        }\n        onRemove(event.currentTarget.dataset.id);\n    }\n\n    return (\n        <li className=\"TodoListItem\">\n            <label \n            className={`TodoListItem__label ${\n                todo.done ? \"TodoListItem__label--done\" : \"\"\n              }`}\n            >\n                <input\n                type=\"checkbox\"\n                checked={todo.done}\n                value={todo.id}\n                onChange={handleChangeTodo}\n                />\n                {todo.title}\n            </label>\n            <button data-id={todo.id} onClick={handleClickRemove}>\n                削除\n            </button>\n        </li>\n    );\n};","import { VFC } from \"react\";\nimport { Todo } from \"../lib/todo\";\nimport { TodoListItem } from \"./TodoListItem\";\n\ntype Props = {\n    todoList: Todo[];\n    onChangeDone: (todoId: Todo[\"id\"], done: boolean) => void;\n    onRemove: (todoId: Todo[\"id\"]) => void;\n};\n\nexport const TodoList: VFC<Props> = ({ todoList, onChangeDone, onRemove }) => {\n    return (\n        <ul className=\"TodoList\">\n            {todoList.map((todo) => (\n                <TodoListItem\n                todo={todo}\n                onChangeDone={onChangeDone}\n                onRemove={onRemove}\n                key={todo.id} \n                />\n            ))}\n        </ul>\n    );\n}","import { VFC, useState, ChangeEvent } from \"react\";\nimport { Todo } from \"../lib/todo\";\nimport { NewTodo } from \"./newTodo\";\nimport { TodoList } from \"./TodoList\";\n\n// componentははじめを大文字にする　普通の関数ではないため\n// VFC型は(ctrlキー+クリックで詳細が見れる)\n// VoidFunctionComponentはpropsとcontextを引数に、JSXを返す\nconst App: VFC = () => {\n    const [todoList, setTodoList] = useState<Todo[]>([]);\n\n    const addTodo = (title: string) => {\n        const newTodo = {\n            title,\n            done: false,\n            id: Math.random().toString(),\n        };\n        setTodoList((oldTodoList) => [...oldTodoList, newTodo]);\n    };\n\n    const handleChangeDone = (todoId: Todo[\"id\"], done: boolean) => {\n        setTodoList((oldTodoList) => \n            oldTodoList.map((todo) => {\n                if (todo.id !== todoId) {\n                    return todo;\n                }\n                return { ...todo, done };\n            })\n        );\n    };\n\n    const handleRemove = (todoId: Todo[\"id\"]) => {\n        setTodoList((oldTodoList) =>\n        oldTodoList.filter((todo) => todo.id !== todoId)\n        );\n    };\n\n    return (\n        <div className=\"App\">\n            <NewTodo onAdd={addTodo} />\n            <TodoList \n            todoList={todoList} \n            onChangeDone={handleChangeDone}\n            onRemove={handleRemove} />\n        </div>\n    );\n};\n\nexport default App;","import ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\n\nReactDOM.render(<App />, document.querySelector(\"#app\"));"],"sourceRoot":""}